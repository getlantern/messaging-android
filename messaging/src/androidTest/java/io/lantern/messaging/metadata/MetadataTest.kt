package io.lantern.messaging.metadata

import android.os.Build
import io.lantern.messaging.BaseTest
import io.lantern.messaging.Model
import java.lang.StringBuilder
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertNull
import kotlin.test.assertTrue
import org.junit.Test

/* ktlint-disable max-line-length */
private val expectedClapWaveform = intArrayOf(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 135, 236, 140, 255, 157, 119, 130, 102, 112, 61, 68, 37, 42, 45, 26, 23, 20, 14, 16, 9, 11, 7, 6, 5, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
private val expectedMp3Waveform = intArrayOf(233, 151, 189, 100, 182, 94, 115, 119, 101, 60, 119, 148, 152, 168, 147, 140, 107, 173, 155, 125, 57, 181, 117, 171, 114, 160, 89, 140, 161, 104, 74, 161, 137, 165, 131, 151, 111, 84, 163, 150, 83, 110, 209, 220, 184, 158, 134, 136, 149, 151, 135, 109, 221, 225, 223, 192, 188, 197, 173, 154, 193, 168, 215, 221, 211, 195, 169, 170, 141, 178, 178, 132, 149, 194, 134, 195, 144, 176, 154, 182, 145, 149, 147, 203, 185, 207, 164, 172, 168, 111, 163, 181, 124, 132, 248, 233, 214, 193, 171, 187, 183, 184, 165, 171, 234, 209, 228, 167, 180, 179, 162, 174, 178, 149, 195, 155, 163, 181, 168, 144, 170, 177, 166, 135, 150, 218, 192, 217, 138, 163, 155, 146, 124, 179, 126, 189, 231, 227, 205, 189, 187, 169, 188, 193, 167, 164, 236, 204, 220, 150, 150, 158, 164, 183, 137, 155, 186, 151, 168, 168, 164, 169, 156, 155, 166, 151, 175, 190, 210, 177, 155, 130, 153, 152, 158, 143, 125, 227, 230, 226, 183, 184, 191, 175, 155, 191, 168, 214, 213, 218, 186, 166, 164, 146, 176, 180, 145, 156, 186, 141, 199, 144, 159, 156, 179, 154, 148, 153, 194, 191, 203, 171, 160, 163, 111, 158, 177, 128, 136, 248, 232, 215, 187, 166, 190, 182, 181, 161, 179, 217, 208, 221, 156, 165, 170, 156, 156, 172, 146, 179, 161, 170, 169, 165, 127, 159, 173, 153, 156, 146, 212, 192, 205, 128, 169, 147, 148, 123, 172, 125, 188, 221, 220, 216, 190, 188, 161, 180, 192, 167, 166, 229, 210, 216, 152, 160, 161, 159, 167, 125, 157, 181, 153, 160, 170, 170, 164, 145, 151, 151, 150, 170, 186, 214, 184, 155, 128, 141, 158, 158, 134, 121, 231, 229, 223, 186, 187, 189, 169, 154, 192, 173, 208, 210, 218, 190, 166, 168, 134, 164, 162, 146, 149, 180, 148, 197, 135, 149, 153, 176, 142, 146, 152, 197, 184, 212, 168, 160, 163, 101, 163, 174, 127, 139, 243, 241, 218, 190, 164, 196, 185, 177, 169, 175, 220, 216, 213, 167, 172, 148, 165, 142, 149, 161, 182, 149, 174, 157, 169, 128, 156, 172, 149, 157, 147, 210, 196, 206, 124, 165, 153, 147, 136, 174, 134, 201, 225, 222, 215, 190, 187, 163, 183, 194, 165, 175, 229, 211, 209, 160, 168, 160, 162, 174, 133, 160, 187, 155, 167, 169, 168, 165, 155, 153, 158, 152, 178, 185, 218, 182, 149, 132, 146, 154, 169, 151, 128, 238, 229, 229, 187, 198, 200, 181, 160, 189, 174, 208, 209, 214, 188, 181, 176, 133, 170, 170, 151, 159, 189, 149, 189, 144, 150, 164, 178, 157, 144, 155, 201, 195, 205, 154, 157, 164, 105, 165, 182, 130, 146, 255, 236, 215, 189, 160, 192, 181, 186, 165, 170, 228, 216, 216, 152, 174, 161, 156, 147, 165, 144, 194, 152, 166, 164, 162, 150, 154, 166, 173, 148, 140, 214, 199, 212, 127, 156, 150, 151, 142, 169, 127, 205, 226, 223, 205, 183, 179, 161, 176, 189, 169, 174, 233, 211, 207, 162, 169, 162, 160, 180, 128, 154, 192, 156, 172, 151, 157, 160, 164, 150, 164, 149, 173, 209, 227, 179, 167, 125, 128, 151, 130, 126, 128, 234, 232, 217, 182, 196, 176, 193, 152, 169, 178, 205, 220, 207, 183, 184, 162, 149, 178, 170, 158, 157, 180, 156, 189, 159, 147, 159, 177, 148, 149, 158, 188, 197, 209, 156, 166, 138, 130, 146, 140, 141, 151, 235, 229, 195, 198, 161, 172, 188, 164, 169, 181, 219, 213, 217, 165, 186, 160, 168, 158, 172, 162, 191, 149, 173, 170, 173, 150, 162, 175, 154, 160, 151, 211, 188, 214, 130, 160, 148, 155, 133, 160, 136, 200, 228, 219, 199, 190, 187, 158, 183, 185, 174, 166, 214, 210, 213, 161, 158, 162, 165, 181, 130, 163, 181, 157, 177, 158, 159, 162, 161, 141, 160, 150, 180, 182, 210, 176, 156, 129, 152, 155, 161, 140, 123, 230, 229, 233, 173, 183, 193, 181, 153, 186, 170, 199, 214, 204, 192, 166, 165, 130, 171, 170, 148, 156, 180, 154, 189, 144, 159, 166, 170, 159, 135, 162, 194, 186, 195, 165, 159, 162, 124, 139, 180, 131, 152, 235, 231, 214, 188, 151, 179, 180, 182, 162, 164, 218, 204, 227, 149, 179, 165, 161, 157, 168, 150, 188, 148, 178, 173, 161, 152, 155, 166, 164, 148, 139, 205, 186, 222, 137, 161, 151, 154, 131, 161, 138, 199, 223, 224, 201, 189, 185, 163, 177, 183, 171, 167, 212, 210, 210, 162, 148, 158, 165, 180, 130, 164, 182, 160, 178, 149, 159, 166, 162, 145, 160, 156, 177, 180, 210, 179, 158, 133, 148, 153, 162, 139, 124, 230, 229, 227, 164, 183, 192, 177, 153, 185, 171, 194, 214, 211, 185, 170, 178, 131, 175, 170, 152, 162, 177, 159, 185, 149, 141, 160, 167, 157, 132, 160, 196, 187, 201, 163, 162, 161, 127, 142, 184, 123, 155, 241, 233, 210, 188, 153, 185, 187, 182, 169, 165, 224, 199, 230, 151, 178, 167, 166, 156, 169, 153, 192, 146, 169, 172, 160, 153, 147, 166, 163, 145, 140, 210, 186, 197, 143, 162, 155, 153, 136, 177, 121, 206, 226, 229, 205, 197, 192, 170, 179, 197, 167, 196, 219, 209, 211, 167, 156, 166, 174, 178, 134, 158, 179, 139, 175, 156, 176, 170, 168, 147, 159, 142, 181, 187, 208, 147, 163, 132, 117, 156, 120, 127, 126, 235, 229, 208, 185, 187, 166, 188, 161, 173, 176, 211, 225, 216, 169, 172, 159, 149, 185, 164, 152, 172, 181, 152, 181, 167, 152, 154, 182, 141, 146, 154, 190, 196, 206, 138, 165, 121, 132, 140, 117, 116, 155, 246, 234, 189, 203, 171, 173, 189, 163, 172, 181, 232, 219, 208, 157, 164, 148, 174, 152, 146, 145, 183, 158, 165, 151, 163, 131, 156, 168, 142, 149, 148)
/* ktlint-enable max-line-length */

class MetadataTest : BaseTest() {
    @Test
    fun testJpg() {
        val file = assetToFile("image.jpg")
        val md = Metadata.analyze(file)
        assertEquals("image/jpeg", md.mimeType)
        assertNotNull(md.thumbnail)
        assertTrue(md.thumbnail!!.size < file.length())
        assertEquals("image/webp", md.thumbnailMimeType)
    }

    @Test
    fun testHeic() {
        val file = assetToFile("image.heic")
        val md = Metadata.analyze(file)
        assertNull(md.mimeType)
        assertNull(md.thumbnail)
    }

    @Test
    fun testHeicWithDefaultMimeType() {
        val file = assetToFile("image.heic")
        val md = Metadata.analyze(file, "image/heic")
        assertEquals("image/heic", md.mimeType)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            assertNotNull(md.thumbnail)
            assertTrue(md.thumbnail!!.size < file.length())
            assertEquals("image/webp", md.thumbnailMimeType)
        } else {
            assertNull(md.thumbnail)
        }
    }

    @Test
    fun testVideo() {
        val file = assetToFile("video.mp4")
        val md = Metadata.analyze(file)
        assertEquals("video/mp4", md.mimeType)
        assertNotNull(md.thumbnail)
        assertTrue(md.thumbnail!!.size <= file.length())
        assertEquals("image/webp", md.thumbnailMimeType)
    }

    @Test
    fun testAudio() {
        val file = assetToFile("clap.opus")
        val md = Metadata.analyze(file)
        assertNotNull(md)
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            assertNull(md.thumbnail)
        } else {
            assertNotNull(md)
            assertEquals("audio/opus", md.mimeType)
            assertNotNull(md.thumbnail)
            assertTrue(md.thumbnail!!.size < file.length())
            assertEquals("application/x-lantern-waveform", md.thumbnailMimeType)

            val bars = Model.AudioWaveform.parseFrom(md.thumbnail).barsList
            // We check against the expected waveform to make sure that we get the same result
            // across devices/runs/etc.
            val expected = expectedClapWaveform.joinToString()
            val actual = bars.joinToString()
            assertEquals(expected, actual)

            // The audio file contains mostly silence and a single loud clap. Make sure that the
            // waveform reflects this by having a much higher peak than average value.
            val average = bars.average()
            val peak = bars.maxOrNull()!!
            assertEquals(255, peak)
            assertTrue(peak.toDouble() / average > 100)
            assertEquals("8.853", md.additionalMetadata?.get("duration"))

            // print out the waveform for visual inspection
            val builder = StringBuilder()
            for (i in 0..255) {
                val referenceLevel = 255 - i
                builder.append("$referenceLevel    ")
                bars.forEach {
                    val level = it
                    if (level >= referenceLevel) {
                        builder.append('A')
                    } else {
                        builder.append(' ')
                    }
                }
                builder.append('\n')
            }

            println("Waveform display")
            println(builder.toString())
        }
    }

    @Test
    fun testAudioLargeMp3() {
        val file = assetToFile("test.mp3")
        val md = Metadata.analyze(file)
        assertNotNull(md)
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            assertNull(md.thumbnail)
        } else {
            assertNotNull(md)
            assertEquals("audio/mpeg", md.mimeType)
            assertNotNull(md.thumbnail)
            assertTrue(md.thumbnail!!.size < file.length())
            assertEquals("application/x-lantern-waveform", md.thumbnailMimeType)

            val bars = Model.AudioWaveform.parseFrom(md.thumbnail).barsList
            // We check against the expected waveform to make sure that we get the same result
            // across devices/runs/etc.
            val expected = expectedMp3Waveform.joinToString()
            val actual = bars.joinToString()
            assertEquals(expected, actual)
        }
    }
}
