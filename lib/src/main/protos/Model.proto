syntax = "proto3";

package model;

option java_package = "io.lantern.messaging";

enum MessageDirection {
  OUT = 0;
  IN = 1;
}

// A contact in the address book
message Contact {
  enum Type {
    DIRECT = 0; // e.g. a person
    GROUP = 1;
  }

  Type type = 2; //
  string id = 3; // the public IdentityKey for direct contacts, the globally unique group id (type 4 UUID) for groups, both base32 encoded
  repeated string memberIds = 4; // the ids of group member Contacts, base32 encoded (only applies to Contacts of type GROUP)
  string displayName = 5; // the display name shown for this Contact (specific to our current device, the contact may have different display names in other people's address books)
  int64 createdTime = 6; // the millisecond unix timestamp when this contact was created
  int64 mostRecentMessageTs = 7; // the unix timestamp of the most recent message with this contact
  MessageDirection mostRecentMessageDirection = 8; // direction of the most recent message with this contact
  string mostRecentMessageText = 9; // the text of the most recent message with this contact
}

// A short message, the primary type of message exchanged by users. It's either text or ogg encoded
// voice data.
message ShortMessage {
  bytes id = 1; // the id of the message, unique under the given sender
  bytes replyToSenderId = 2; // if this message is a reply to another message, this contains the ID of the sender of that message
  bytes replyToId = 3; // if this message is a reply to another message, this contains the ID of that messsage
  oneof body {
    string text = 4;
    bytes oggVoice = 5;
  }
}

// A record of a ShortMessage either sent or received
message ShortMessageRecord {
  enum DeliveryStatus {
    SENDING = 0; // message is currently in the process of sending but hasn't successfully finished yet
    PARTIALLY_SENT = 1; // message failed to send to a subset of recipients, will not retry
    COMPLETELY_SENT = 2; // message has been successfully sent
  }

  string senderId = 1; // the id of who sent this message
  string id = 2; // the id of the message (same as on ShortMessage), encoded in base32
  int64 ts = 3; // The unix timestamp in nanoseconds for when the message was sent (for OUT) or received (for IN)
  string replyToSenderId = 4; // if this message is a reply to another message, this contains the ID of the sender of that message
  string replyToId = 5; // if this message is a reply to another message, this contains the ID of that messsage
  MessageDirection direction = 6; // direction in which the message is going/came
  DeliveryStatus status = 7; // for outgoing messages, the status of its sending and delivery
  bytes message = 8; // the serialized ShortMessage
}

message OutgoingShortMessage {
  enum SubDeliveryStatus {
    SENDING = 0; // message is currently in the process of sending to specific deviceId but hasn't successfully finished yet
    SENT = 1; // message has been sent to specific deviceId
  }

  string senderId = 1; // the id of who sent this message (same as on ShortMessageRecord)
  string id = 2; // the id of the message (same as on ShortMessage), encoded in base32
  int64 sent = 3; // The unix timestamp in nanoseconds for when the message was sent
  string recipientId = 4; // the id of the recipient
  map<string, SubDeliveryStatus> subDeliveryStatuses = 5; // Statuses of subdeliveries to specific deviceIds
}

message TransferMessage {
  oneof content {
    bytes shortMessage = 1; // the serialized ShortMessage
  }
}