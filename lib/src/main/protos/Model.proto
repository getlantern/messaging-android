syntax = "proto3";

package model;

option java_package = "io.lantern.messaging";

// An Address for a specific client
message Address {
  bytes identityKey = 1;  // The 32 byte ed25519 public key that uniquely identifies an identity (e.g. a user)
  bytes deviceId = 2;  // Identifier for a specific device, only unique for a given identityKey
}

// A contact in the address book
message Contact {
  bytes identityKey = 1; // the public key identifying this Contact
  string displayName = 2; // the display name shown for this Contact (specific to our current device, the contact may have different display names in other people's address books)
}

// A conversation (
message Conversation {
  repeated bytes identityKeys = 1; // the identity keys of the other participants in this conversation
  string displayName = 2; // an optional name of this conversation
  int64 mostRecentMessageTime = 3; // the sent unix timestamp of the most recent message in this conversation
  string mostRecentMessageText = 4; // the text of the most recent message in this conversation
}

// A short message, the primary type of message exchanged by users. It's either text or ogg encoded
// voice data.
message ShortMessage {
  bytes id = 1; // the id of the message
  int64 sent = 2; // The unix timestamp in nanoseconds for when the message was sent
  oneof body {
    string text = 3;
    bytes oggVoice = 4;
  }
}

// A record of a ShortMessage either sent or received
message ShortMessageRecord {
  enum Direction {
    OUT = 0;
    IN = 1;
  }

  enum DeliveryStatus {
    UNSENT = 0;
    FAILING = 1; // message is currently failing to send but we'll try again
    PARTIALLY_FAILED = 2; // message failed to send to a subset of recipients, will not retry
    COMPLETELY_FAILED = 3; // message failed to send to any recipients, will not retry
    SENT = 4; // message has been successfully sent
  }

  string id = 1; // the id of the message (same as on ShortMessage)
  int64 sent = 2; // The unix timestamp in nanoseconds for when the message was sent
  Direction direction = 3; // direction in which the message is going/came
  DeliveryStatus status = 4; // for outgoing messages, the status of its sending and delivery
  bytes message = 5; // the serialized ShortMessage
}

message OutgoingShortMessage {
  repeated bytes recipients = 1; // the IdentityKeys of direct recipients
  ShortMessage message = 2;
  int64 lastFailed = 3; // Time of last failure (nanoseconds since epoch)
}

message TransferMessage {
  oneof content {
    ShortMessage shortMessage = 1;
  }
}
